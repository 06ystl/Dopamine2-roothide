//
//  Exploit.m
//  Dopamine
//
//  Created by Lars Fr√∂der on 10.01.24.
//

#import "Exploit.h"
#import <dlfcn.h>

#import "ExploitManager.h"

@implementation Exploit

- (instancetype)initWithPath:(NSString *)exploitPath info:(NSDictionary *)exploitInfo flavorName:(NSString *)flavorName flavorDictionary:(NSDictionary *)flavorInfo
{
    self = [super init];
    if (self) {
        _flavor = flavorName;
        _executablePath = [exploitPath stringByAppendingPathComponent:exploitInfo[@"CFBundleExecutable"]];
        
        NSString *typeString = exploitInfo[@"DPExploitType"];
        if ([typeString isEqualToString:@"Kernel"]) {
            _type = EXPLOIT_TYPE_KERNEL;
        }
        else if ([typeString isEqualToString:@"PAC"]) {
            _type = EXPLOIT_TYPE_PAC;
        }
        else if ([typeString isEqualToString:@"PPL"]) {
            _type = EXPLOIT_TYPE_PPL;
        }
        else {
            NSLog(@"Unknown Exploit Type: %@", typeString);
            return nil;
        }
        
        NSNumber *priorityNum = flavorInfo[@"DPFlavorPriority"];
        _priority = [priorityNum unsignedLongLongValue];
        
        _name = exploitInfo[@"CFBundleDisplayName"];
        _identfier = exploitInfo[@"CFBundleIdentifier"];
        if (![flavorName isEqualToString:@"default"]) {
            _name = [NSString stringWithFormat:@"%@, %@", _name, flavorName];
            _identfier = [NSString stringWithFormat:@"%@.%@", _identfier, flavorName];
        }
    }
    return self;
}

- (NSString *)displayName
{
    if (self.flavor) {
        return [NSString stringWithFormat:@"%@ (%@)", self.name, self.flavor];
    }
    else {
        return self.name;
    }
}

- (BOOL)isSupported
{
    return YES;
}

- (int)load
{
    if (!_handle) {
        _handle = dlopen(_executablePath.fileSystemRepresentation, RTLD_NOW);
    }
    if (_handle) return 0;
    return -1;
}

- (int)run
{
    if (!_handle) return -1;
    int (*exploit_init)(const char *flavor) = dlsym(_handle, "exploit_init");
    if (!exploit_init) return -1;
    int r = exploit_init(_flavor.UTF8String);
    if (r == 0) [[ExploitManager sharedManager].activeExploits addObject:self];
    return r;
}

- (int)cleanup
{
    if (!_handle) return -1;
    int (*exploit_deinit)(void) = dlsym(_handle, "exploit_deinit");
    if (!exploit_deinit) return -1;
    int r = exploit_deinit();
    if (r == 0) [[ExploitManager sharedManager].activeExploits removeObject:self];
    return r;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"<Exploit: identifier = %@>", self.identfier];
}

@end
